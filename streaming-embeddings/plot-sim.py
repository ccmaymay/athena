#!/usr/bin/env python2.7


import readline  # noqa
from rpy2.robjects import globalenv, r
from rpy2.robjects.packages import importr
from rpy2.robjects.vectors import StrVector, FloatVector, DataFrame

import random
import codecs
import logging


def plot_sim_scatter(baseline_sim_path, sim_path,
                     alpha=0.01, size=1, log_interval=1000000, header=True,
                     max_num_points=None,
                     baseline_sim_name='word2vec',
                     sim_name='ssw2v',
                     colour='red', output_path='sim.pdf'):
    sim_pairs = dict()

    logging.info('loading baseline similarity ...')
    with codecs.open(baseline_sim_path, encoding='utf-8') as f:
        for (line_num, line) in enumerate(f):
            if header and line_num == 0:
                continue

            if (line_num + 1) % log_interval == 0:
                logging.info('processing line %d ...' % (line_num + 1,))

            (word1, word2, sim) = line.strip().split('\t')
            sim_pairs[(word1, word2)] = (float(sim), None)

    logging.info('loaded %d baseline pairs' % len(sim_pairs))

    logging.info('loading test similarity ...')
    with codecs.open(sim_path, encoding='utf-8') as f:
        for (line_num, line) in enumerate(f):
            if header and line_num == 0:
                continue

            if (line_num + 1) % log_interval == 0:
                logging.info('processing line %d ...' % (line_num + 1,))

            (word1, word2, sim) = line.strip().split('\t')
            for k in ((word1, word2), (word2, word1)):
                if k in sim_pairs:
                    sim_pairs[k] = (sim_pairs[k][0], float(sim))
                    break

    logging.info('sorting and filtering word pairs ...')
    keys = sorted(k for k in sim_pairs.keys() if None not in sim_pairs[k])

    logging.info('have %d pairs after filtering' % len(keys))
    if max_num_points is not None and len(keys) > max_num_points:
        keys = random.sample(keys, max_num_points)
        logging.info('have %d pairs after thresholding' % len(keys))

    logging.info('creating data frame ...')
    globalenv['d'] = DataFrame({
        'sim.baseline': FloatVector(tuple(sim_pairs[k][0] for k in keys)),
        'sim': FloatVector(tuple(sim_pairs[k][1] for k in keys)),
        'word.1': StrVector(tuple(k[0] for k in keys)),
        'word.2': StrVector(tuple(k[1] for k in keys)),
    })

    logging.info('plotting ...')
    importr('ggplot2')
    globalenv['alpha'] = alpha
    globalenv['size'] = size
    globalenv['name.sim.baseline'] = baseline_sim_name
    globalenv['name.sim'] = sim_name
    globalenv['colour'] = colour
    globalenv['path.output'] = output_path
    r('''
    which.nan <- is.nan(d$sim) | is.nan(d$sim.baseline)
    num.nan <- sum(which.nan)
    num.total <- length(which.nan)
    d <- subset(d, ! which.nan)
    rho <- round(cor(d$sim, d$sim.baseline), 2)
    ggplot(d[!which.nan,], aes(x=sim.baseline, y=sim)) +
        geom_point(alpha=alpha, size=size, colour=colour) +
        geom_abline(intercept=0, slope=1) +
        theme_bw() +
        xlab(name.sim.baseline) +
        ylab(name.sim) +
        xlim(-0.2, 1) +
        ylim(-0.2, 1) +
        ggtitle(paste('rho = ', rho, ',  nan = ', num.nan, ' / ', num.total,
                      sep=''))
    ggsave(path.output, width=3.5, height=3.5, units='in')
    ''')


def main():
    from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
    parser = ArgumentParser(
        description='make scatter-plot of paired word embedding cosines '
                    'generated by two different models',
        formatter_class=ArgumentDefaultsHelpFormatter
    )
    parser.add_argument('baseline_sim_path', type=str,
                        help='path to baseline word similarities')
    parser.add_argument('sim_path', type=str,
                        help='path to test word similarities')
    parser.add_argument('--size', type=float, default=0.3,
                        help='size of points')
    parser.add_argument('--alpha', type=float, default=0.1,
                        help='transparency of points')
    parser.add_argument('--max-num-points', type=int,
                        help='maximum number of points to plot')
    parser.add_argument('--output-path', type=str, default='sim.pdf',
                        help='file path to which to write plot')
    parser.add_argument('--baseline-sim-name', type=str, default='word2vec',
                        help='plot label for baseline similarities')
    parser.add_argument('--sim-name', type=str, default='ssw2v',
                        help='plot label for test similarities')
    parser.add_argument('--header', action='store_true',
                        help='input files have headers (skip first line)')
    args = parser.parse_args()

    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)-15s %(levelname)s %(process)d %(funcName)s:'
               ' %(message)s'
    )

    plot_sim_scatter(args.baseline_sim_path, args.sim_path,
                     size=args.size, alpha=args.alpha,
                     max_num_points=args.max_num_points,
                     output_path=args.output_path,
                     sim_name=args.sim_name,
                     baseline_sim_name=args.baseline_sim_name,
                     header=args.header)


if __name__ == '__main__':
    main()
